"Vundle config

set nocompatible              " be iMproved, required
filetype off                  " required
set shell=/bin/bash

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

" The following are examples of different formats supported.
" Keep Plugin commands between vundle#begin/end.
" plugin on GitHub repo
Plugin 'tpope/vim-fugitive'
" Git plugin not hosted on GitHub
Plugin 'wincent/command-t'
"Plugin 'git://git.wincent.com/command-t.git'

"From here other plugins from the original Vundle config
Plugin 'scrooloose/nerdtree'        
Plugin 'skammer/vim-css-color'
Plugin 'hail2u/vim-css3-syntax'
Plugin 'groenewege/vim-less'
Plugin 'jelera/vim-javascript-syntax'
Plugin 'cakebaker/scss-syntax.vim'
Plugin 'airblade/vim-gitgutter'
Plugin 'mileszs/ack.vim'
"Plugin 'scrooloose/syntastic'
" Track the engine.
Plugin 'SirVer/ultisnips'
Plugin 'majutsushi/tagbar'
"
" Snippets are separated from the engine. Add this if you want them:
Plugin 'ervandew/supertab'
Plugin 'honza/vim-snippets'
Plugin 'Valloric/YouCompleteMe'
Plugin 'kshenoy/vim-signature'

Plugin 'nvie/vim-flake8'
Plugin 'matthewsimo/angular-vim-snippets'
Plugin 'leafgarland/typescript-vim'
Plugin 'christoomey/vim-tmux-navigator'

" XML
Plugin 'sukima/xmledit'
" Disable this plugin
"et loaded_xmledit = 1

Plugin 'Dimercel/todo-vim'

" Comment
Plugin 'tomtom/tcomment_vim'

" make YCM compatible with UltiSnips (using supertab)
let g:ycm_key_list_select_completion = ['<tab>', '<C-n>', '<Down>']
let g:ycm_key_list_previous_completion = ['<s-tab>', '<C-p>', '<Up>']
let g:SuperTabDefaultCompletionType = '<C-n>'
 
 " better key bindings for UltiSnipsExpandTrigger
let g:UltiSnipsExpandTrigger="<c-b>"
let g:UltiSnipsJumpForwardTrigger= "<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"

" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just
":PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line

" End of Vundle config

" General
set number  " Show line numbers
set linebreak " Break lines at word (requires Wrap lines)
set showbreak=+++ " Wrap-broken line prefix
set textwidth=0 " Line wrap (number of cols)
set showmatch " Highlight matching brace
set visualbell  " Use visual bell (no beeping)
 
set hlsearch  " Highlight all search results
set smartcase " Enable smart-case search
set ignorecase  " Always case-insensitive
set incsearch " Searches for strings incrementally
 
set autoindent  " Auto-indent new lines
set expandtab " Use spaces instead of tabs
set shiftwidth=4  " Number of auto-indent spaces
set smartindent " Enable smart-indent
set smarttab  " Enable smart-tabs
set softtabstop=4 " Number of spaces per Tab
   
" Advanced
set ruler " Show row and column ruler information

set undolevels=1000 " Number of undo levels
set backspace=indent,eol,start  " Backspace behaviour

      
" Generated by VimConfig.com

"set mouse=a " activate mouse

" Autoload NERDTree if no file specified

"autocmd StdinReadPre * let s:std_in=1
"autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree |
"endif

" Auto close NERDTree if no more files

"autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") &&
"b:NERDTreeType == "primary") | q | endif

" Show hidden files in NERDTree

let NERDTreeShowHidden=1
let NERDTreeIgnore = ['\.pyc$']

syntax on

" enable copy to clipboard

set clipboard=unnamed

nnoremap <F2> :set invpaste paste?<CR>
set pastetoggle=<F2>
set showmode

""""""""""""""""""""""""""""
"Git-gutter configuration
""""""""""""""""""""""""""""

let g:gitgutter_updatetime = 750
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1

""""""""""""""""""""""""""""
"" Syntastic configuration
""""""""""""""""""""""""""""
"
"set statusline+=%#warningmsg#
"set statusline+=%{SyntasticStatuslineFlag()}
"set statusline+=%*
"
"let g:syntastic_always_populate_loc_list = 1
"let g:syntastic_auto_loc_list = 1
"let g:syntastic_check_on_open = 0
"let g:syntastic_check_on_wq = 0
"
"" so that syntastic uses .jshintrc files if present -
"http://stackoverflow.com/questions/28573553/how-can-i-make-syntastic-load-a-different-checker-based-on-existance-of-files-in
"
"autocmd FileType javascript let b:syntastic_checkers = findfile('.jshintrc',
"'.;') != '' ? ['jshint'] : ['standard']

""""""""""""""""""""""""""""
"" vim-flake8 config
""""""""""""""""""""""""""""
let g:flake8_show_in_gutter = 1
let g:flake8_show_quickfix = 1
let g:flake8_max_markers=50
let g:flake8_ignore="W504"

"""""""""""""""""""""""""""
" Custom (no plugin related)
"""""""""""""""""""""""""""

" show filename
set statusline+=%F


let mapleader = ","
let g:CommandTTraverseSCM = 'pwd'
nmap <silent> <Leader>t <Plug>(CommandT)
nmap <silent> <Leader>b <Plug>(CommandTBuffer)
nmap <silent> <Leader>j <Plug>(CommandTJump)
set wildignore+=*.o,*.obj,.git,*.pyc
set wildmenu
set wildmode=list:longest,full


"
" ACK
"
"vnoremap <Leader>w y:Ack "<C-r>=fnameescape(@")<CR><CR>
nnoremap <Leader>w :Ack! "\b<C-R><C-W>\b"<CR>:cw<CR>
nnoremap <Leader>a :Ack!<Space>

nnoremap <silent> <C-l> <c-w>l
nnoremap <silent> <C-h> <c-w>h
nnoremap <silent> <C-k> <c-w>k
nnoremap <silent> <C-j> <c-w>j

"
" Nerdtree
"
map <Leader>n :NERDTreeToggle<CR>
map <Leader>m :NERDTreeFind<CR>
let NERDTreeIgnore = ['\.pyc$', '\.swp']

" Buffer swtiching
nmap <C-f> :e#<CR>

" Tagbar
" nmap <C-f> :e#<CR>
" nmap <Leader>p :TagbarToggle<CR>

" todo-vim
nmap <Leader>o :TODOToggle<CR>

set t_Co=256
if $TERM == "xterm-256color" || $TERM == "screen-256color" || $COLORTERM == "gnome-terminal"
      set t_Co=256
endif
colorscheme zenburn
set hidden

" Para cerrar el NERDTree luego de abrir el archivo
let NERDTreeQuitOnOpen = 1

nnoremap <C-b> :let _s=@/ <Bar> :%s/\s\+$//e <Bar> :let @/=_s <Bar> :nohl <Bar> :unlet _s <CR>

" Zoom with Ctrl + Z
" Zoom / Restore window.
function! s:ZoomToggle() abort
   if exists('t:zoomed') && t:zoomed
       execute t:zoom_winrestcmd
       let t:zoomed = 0
   else
       let t:zoom_winrestcmd = winrestcmd()
       resize
       vertical resize
       let t:zoomed = 1
   endif
endfunction
command! ZoomToggle call s:ZoomToggle()
nnoremap <silent> <C-z> :ZoomToggle<CR>

if exists('$TMUX')
  function! TmuxOrSplitSwitch(wincmd, tmuxdir)
    let previous_winnr = winnr()
    silent! execute "wincmd " . a:wincmd
    if previous_winnr == winnr()
      call system("tmux select-pane -" . a:tmuxdir)
      redraw!
    endif
  endfunction

  let previous_title = substitute(system("tmux display-message -p '#{pane_title}'"), '\n', '', '')
  let &t_ti = "\<Esc>]2;vim\<Esc>\\" . &t_ti
  let &t_te = "\<Esc>]2;". previous_title . "\<Esc>\\" . &t_te

  nnoremap <silent> <C-h> :call TmuxOrSplitSwitch('h', 'L')<cr>
  nnoremap <silent> <C-j> :call TmuxOrSplitSwitch('j', 'D')<cr>
  nnoremap <silent> <C-k> :call TmuxOrSplitSwitch('k', 'U')<cr>
  nnoremap <silent> <C-l> :call TmuxOrSplitSwitch('l', 'R')<cr>
else
  map <C-h> <C-w>h
  map <C-j> <C-w>j
  map <C-k> <C-w>k
  map <C-l> <C-w>l
endif

fun! UpByIndent()
    norm! ^
    let start_col = col(".")
    let col = start_col
    while col >= start_col
        norm! k^
        if getline(".") =~# '^\s*$'
            let col = start_col
        elseif col(".") <= 1
            return
        else
            let col = col(".")
        endif
    endwhile
endfun

nnoremap ;; :call  UpByIndent()<cr>

set colorcolumn=80
